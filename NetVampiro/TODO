CHECK:
 - java.lang.PrintStream vs. java.io.PrintStream (why lang package?)
 - java.lang.Properties agains JavaDoc with none String get/set Property-Key
 - java.lang.Properties load Unicode files
 - java.lang.Cloneable - implements clone() Method; need we this to be compliant?
 - What todo with annotations?
   - java.lang.Deprecated
   - java.lang.FunctionalInterface
   - java.lang.Override
   - java.lang.SafeVarargs
   - java.lang.SuppressWarning
   - java.lang.annotation.Documented
   - java.lang.annotation.Inherited
   - java.lang.annotation.Native
   - java.lang.annotation.Repeatable
   - java.lang.annotation.Retention
   - java.lang.annotation.Target
 - rename internal class with prefixes? see java.math. ...
 - why is java.math.Primatily not as internal declared?
 
To Implement:
 - java.nio.channel (java.io.FileOutputStream.getChannel())
 - java.text.MessageFormat
 - FileLock (see http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/a5300fc5-126c-4e33-8ae6-13376031e9fe/)
 + Java , this and more
   + source missing
     - java.io.ObjectInputFilter with nested types
     - java.io.Console
     - java.io.FilterWriter
     - java.io.ObjectInputStream.GetField
     - java.io.ObjectOutputStream.PutField
     - java.io.ObjectStreamClass
     - java.io.ObjectStreamField
     - java.lang.ProcessHandle
     - java.lang.ProcessHandle.Info
     - java.lang.StackWalker.StackFrame
     - java.lang.System.Logger
     - java.lang.Thread.UncaughtExceptionHandler
     - java.lang.Character.Subset
     - java.lang.Character.UnicodeBlock
     - java.lang.Compiler
     - java.lang.Enum
     - java.lang.InheritableThreadLocal
     - java.lang.Module
     - java.lang.ModuleLayer
     - java.lang.Object --> check with our extension methods
     - java.lang.ProcessBuilder.Redirect
     - java.lang.Record
     - java.lang.Runtime.Version
     - java.lang.StackWalker
     - java.lang.System.LoggerFinder
     - java.lang.ThreadGroup
     - java.lang.Character.UnicodeScript
     - java.lang.ProcessBuilder.Redirect.Type
     - java.lang.StackWalker.Option
     - java.lang.Thread.State
     - java.lang.annotation.ElementType
     - java.lang.annotation.RetentionPolicy
     - java.lang.constant.*
     - java.lang.invoke.*
     - java.lang.module.*
     - java.lang.reflect.AnnotatedArrayType
     - java.lang.reflect.AnnotatedElement
     - java.lang.reflect.AnnotatedParameterizedType
     - java.lang.reflect.AnnotedType
     - java.lang.reflect.AnnotedTypeVariable
     - java.lang.reflect.AnnotedTypeWildcard
     - java.lang.reflect.GenericArrayType
     - java.lang.reflect.GenericDeclaration
     - java.lang.reflect.InvocationHandler
     - java.lang.reflect.Member
     - java.lang.reflect.ParamterizedType
     - java.lang.reflect.Type
     - java.lang.reflect.TypeVariable
     - java.lang.reflect.WildcardType
     - java.lang.reflect.Executable
     - java.lang.reflect.Field
     - java.lang.reflect.Parameter
     - java.lang.reflect.Proxy
     - java.lang.reflect.RecordComponent
     - java.lang.reflect.ReflectPermission
     - java.lang.reflect.InaccessibleObjectException
     - java.lang.reflect.MalformedParameterizedTypeException
     - java.lang.reflect.MalformedParametersExeption
     - java.lang.runtime.*
     - java.util.Optional
     - java.util.OptionalDouble
     - java.util.OptionalInt
     - java.util.OptionalLong
     - java.net.DatagramSocketImplFactory
     - java.net.FileNameMap
     - java.net.ProtocolFamily
     - java.net.SocketImplFactory
     - java.net.SocketOption
     - java.net.Authenticator
     - java.net.CacheRequest
     - java.net.CacheResponse
     - java.net.CookieHandler
     - java.net.DatagramPaket
     - java.net.DatagramSocket
     - java.net.DatagramSocketImpl
     - java.net.HttpURLConnection
     - java.net.IDN
     - java.net.Inet4Address
     - java.net.Inet6Address
     - java.net.InetAddress
     - java.net.InetSocketAddress
     - java.net.SocketImpl
     - java.net.SocketPermission
     - java.net.StandardSocketOptions
     - java.net.URLClassLoader
     - java.net.URLDecoder
     - java.net.URLEncoder
     - java.net.URLPermission
     - java.net.Authenitcator.RequestorType
     - java.net.Proxy.Type
     - java.net.StandardProtocolFamily
   + content missing
     - java.io.ObjectStreamConstants
     - java.io.FileDescriptor
     - java.lang.CharSequence
     - java.lang.Iterable
     - java.lang.Runtime
     - java.lang.System
     - java.lang.ref.Cleaner
     - java.net.InetAddress
     - java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER
     - java.net.HttpCookie
   + content changed
     - java.util.Observable - deprecated since Java9
     - java.util.Observer   - deprecated since Java9
 - Serialism in Java format (see ... and ...)
 

Some projects needed:
- Project to migrate GPL2 test as external project
- CleanVampire projects  (the implementations with no deprecations for clean programmers)
- VampireApi project (containts all implementationsthat works at full moon in Java 16, includes also CleanVampire for default programmers)
- SunVampire projects (the sun is down and this classes are missing in Java 16 - includes also VampireApi for legacy programmers)

Some tools are needed:

In beginning:
 - TestCases - I need much more

Not implemented:
 - PoRE (see later)


(1) [PoRE] Potentially release error checking tool:
    All time check before release:
    (A) all "catch (java.lang.InterruptedException e) {" need same code including 
        into "catch (System.Threading.ThreadInterruptedException e){"
    (B) Serialize check. Because Java implements serialize over interface for all
        subclasses but C# used annotations to be declared at single types.
    (C) All types are declare, with hierarchie
    (D) All methods and fields are declare
    (E) TestCases